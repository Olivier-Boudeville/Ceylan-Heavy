# Author: Olivier Boudeville [olivier (dot) boudeville (at) esperide (dot) com]
#
# Bash Basics: everything that is not specific to any particular setting.
#
# Creation date: 26/6/2002

# See also: http://www.tldp.org/LDP/abs/html/sample-bashrc.html


if [ -z "$PROFILE_LOADED" -a -e /etc/profile ]; then
	. /etc/profile
fi

#-----------------------------------
# Source global definitions (if any)
#-----------------------------------

if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi


# Set default permissions for newly created files and directories
# (user file-creation mode mask).
#
# Only the file permission bits of the mask are used under Linux (see
# umask(2)), the suid, sgid and sticky bits of the mask are ignored).
#
# Use 'umask -S' to display the corresponding default permissions.

# Created files are "-rw-rw-r--", directories are "drwxrwxr-x":
#umask 0002

# Safer, preferred, but potentially causing hassles:
# Created files are "drwxr-x---", directories are "rw-r-----":
umask 0027

# Safe editing, to fallback to at least an acceptable Emacs if possible:
function esafe()
{

	emacs=$(which emacs 2>/dev/null)

	if [ ! -x "${emacs}" ]; then

		gedit=$(which gedit 2>/dev/null)

		if [ ! -x "${gedit}" ]; then

		   nano=$(which nano 2>/dev/null)

	   if [ ! -x "${nano}" ]; then

		   echo "  Error, no text editor found (no emacs, gedit or nano)." 1>&2
		   #exit 10

	   else
			   ${nano} $* &
	   fi

		else
			${gedit} $* &
	fi

	else

	emacs_init_opt=""

	emacs_fallback_dir="${HOME}/.emacs.d-fallback"

	if [ -d "${emacs_fallback_dir}" ]; then
	   emacs_init_opt="--init-directory=${emacs_fallback_dir}"
	fi

		${emacs} ${emacs_init_opt=} $* &

	fi

}



# Tells the shell to apply Emacs editing conventions:
set -o emacs



#---------------
# Some settings
#---------------

#ulimit -S -c 0     # Don't want any coredumps
set -o notify
set -o noclobber

# So that Ctrl-d does not exit the shell:
IGNOREOF=1

set -o ignoreeof

#set -o nounset
#set -o xtrace          # useful for debuging

# Enable options:
shopt -s cdspell
shopt -s cdable_vars
shopt -s checkhash
shopt -s checkwinsize
shopt -s mailwarn
shopt -s sourcepath
shopt -s no_empty_cmd_completion  # bash>=2.04 only
shopt -s cmdhist
shopt -s histappend histreedit histverify
shopt -s extglob   # necessary for programmable completion
shopt -s direxpand # To avoid that 'cp * $T/' becomes 'cp * \$T/' when tab is hit

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
  . /etc/bash_completion
fi

# Some terminals do not manage UTF8:
export LANG=en_US.utf8
#export LANG=en_GB.utf8
#export LANG=en_GB
#export LANG=fr_FR.iso885915@euro
#export LANG=fr_FR.utf8

# Otherwise perl will protest a lot with:
#perl: warning: Setting locale failed.
#perl: warning: Please check that your locale settings:
#	LANGUAGE = (unset),
#	LC_ALL = (unset),
#	LANG = "en_GB.utf8"
#    are supported and installed on your system.
#perl: warning: Falling back to the standard locale ("C").
#
export LC_ALL=en_US.UTF-8

# Disable options:
shopt -u mailwarn
unset MAILCHECK   # I don't want my shell to warn me of incoming mail
shopt -s checkwinsize

export TIMEFORMAT=$'\nreal %3R\tuser %3U\tsys %3S\tpcpu %P\n'
export HISTIGNORE="&:bg:fg:ll:h"
export HOSTFILE=$HOME/.hosts   # Put a list of remote hosts in ~/.hosts


# They are possibly already set in ~/.bashrc.local:

if [ -z "${HOME_ROOT}" ]; then

   export HOME_ROOT="${HOME}"

fi


if [ -z "${SOFTWARE_ROOT}" ]; then

   export SOFTWARE_ROOT="${HOME_ROOT}/Software"
   export PATH="${SOFTWARE_ROOT}/bin/:${PATH}"

fi


# Therefore ~/bin can override system ones:
export PATH=${SOFTWARE_ROOT}/bin:$HOME/bin:/usr/bin:/sbin:/usr/local/bin:/usr/bin/X11:/usr/sbin:$PATH:.


# Proper colors assigned:
# Not pleasant: *.rst=01;37
#
export LS_COLORS='no=00:fi=00:di=01;35:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=41;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jpg=01;94:*.png=01;94:*.gif=01;94:*.bmp=01;94:*.ppm=01;94:*.tga=01;94:*.xbm=01;94:*.xpm=01;94:*.tif=01;94:*.png=01;94:*.mpg=01;94:*.avi=01;94:*.fli=01;35:*.gl=01;35:*.dl=01;35'


# Wanting to display either nothing (if not in a Git working tree) or the
# current branch name, between brackets.
#
# Inspired from http://www.micahcarrick.com/show-git-branch-in-shell-prompt.html:
parse_git_branch()
{
	#echo "[TEST]"

	# Fully suitable:
	#git branch 2>/dev/null | grep '^*' | colrm 1 2

	# More complex, and extra parentheses:
	#git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'

	# Presumably quicker, yet unable to report detached heads:
	#git symbolic-ref HEAD --short 2>/dev/null

	branch="$(git branch 2>/dev/null | grep '^*' | colrm 1 2)"

	if [ -n "${branch}" ]; then
	   echo " [${branch}]"
	#else
	#   echo " (not in a Git clone)"
	fi
}


# As stashes may be forgotten:
parse_git_stash()
{
	stash="$(git stash list 2>/dev/null)"

	if [ -n "${stash}" ]; then
	   echo " (stash)"
	#else
	#   echo " (no stash)"
	fi
}


hostname=$(hostname --short)


# Without user:
#export PS1="\n\e[95m\h\e[95m \e[96m\t \e[93m"'$PWD'"\e[92m\$(parse_git_branch)\[\033[31m\]\e[95m\e[97m\n>"

# Note that at least prompt-related variables may be re-evaluated (e.g. in
# ~/.bashrc.final) to account for variables (e.g. like 'hostname') that may have
# been udpated since then.

# With user and verbatim host:
#export PS1="\n\e[95m\h \e[92m\u\e[95m \e[96m\t \e[93m"'$PWD'"\e[96m\$(parse_git_branch)\[\033[31m\$(parse_git_stash)]\e[95m\e[97m\n>"

# Git branch and stash:
#export PS1="\n\e[95m${hostname} \e[92m\u\e[95m \e[96m\t \e[93m"'$PWD'"\e[96m\$(parse_git_branch)\[\033[31m\$(parse_git_stash)\]\e[95m\e[97m\n>"


# Git branch and stash, and mamba:
export PS1="\n\e[95m${hostname} \e[92m\u\e[95m \e[96m\t \e[93m"'$PWD'"\e[96m\$(parse_git_branch)\[\033[34m\$(parse_git_stash)\$(my_mamba_setup)${EXTRA_PROMPT}\e[95m\e[97m\n>"


# History: not too much memory (saturates consoles; however one may use 'history
# 150' for example to limit outputs, see the 'h' alias), no duplicates stored,
# and commands started with a space *are* now again recorded:

HISTSIZE=2000

# No ignorespace wanted (so no ignoreboth either):
HISTCONTROL=ignoredups


# Removes from the bash history the last executed command:
#
# (more reliable than setting temporarily export HISTFILE=/dev/null)
#
function forget_last_command()
{

	# Done twice to remove the call to this function as well; also: force-written in history file for proper, safer deleting:

	history -d $(history | awk 'END{print $1-1}') && history -d $(history|awk 'END{print $1}') && history -w

}


IGNOREOF=1

# Preferred pager:

#export PAGER_NAME=more

# Use ':n' to display the next file:
export PAGER_NAME=less
export PAGER_PRESERVE_COLORS="--use-color --raw-control-chars"


#export PAGER_NAME=most

# This is a special variable name for 'less':
export LESS="-r -X --force --QUIT-AT-EOF"

PAGER=$(which ${PAGER_NAME} 2>/dev/null)

if [ ! -x "${PAGER}" ]; then

   # Used to be preferred to 'less' (content stays in terminal window
   # afterwards):

   PAGER=$(which more 2>/dev/null)

   #PAGER=$(which less 2>/dev/null) --no-init

fi

# Not wanting systemctl to scroll horizontally:
export SYSTEMD_PAGER=/bin/more

alias mo="${PAGER}"


alias ll='ls -l'

#alias la="ls -alg $*|mo"
alias la="ls -alg $*"

alias lc='ls -clt'
alias sl='ls'

#alias lr="ls -Rx $*|mo"
alias lr="ls -Rx $*"

#alias dir="ls -l $*|mo"
alias dir="ls -l $*"

alias cls='ct ls'

alias c='cd'

alias s='cd ..'
alias vf='cd'
alias dc='cd'
alias cp='cp -i'
alias rm='rm -i'
alias mv='mv -i'

alias mkdir='mkdir -p'
alias mdkir='mkdir -p'

alias m='make'
alias m='make 2>&1'
alias ma='make all'

alias mbd='make build-debug'
alias mr='make rebuild'


alias g='git'
alias ga='git add'
alias gp='git push'
alias gl='git pull'

#alias gr='grep --color'
#alias gr='grep --color=always'

# Avoid that piping 'gr' does not work correctly because of color control
# sequences (another option is to make it a script and use 'if [ -t 1 ];
# then...') or pipe with a color-enabled pager afterwards (ex: with 'less -r
# -X') so that 'always' can be used:
#
alias gr='grep --color=auto'

alias rgr='regrep'

alias j='jobs -l'
#alias r='rlogin'

# Limiting the screen clobber:
alias h='history 100'

alias pu="pushd"
alias po="popd"

alias top='top.sh'


# Re-run the previous, supposedly failed command, as sudoer:
alias please='sudo $(history -p \!\!)'


# Printer section.

alias print='lpr -p'
alias printText='a2ps'

alias lock='xlock -mode blank'


alias r='fc -e -'
alias x='/usr/bin/X11/xterm -bg black -fg white -name $(basename $PWD) &'



# Re-used again, so that Python interpreters built from sources make the right
# use of the "up arrow" and all:
#
# If 'ImportError: No module named readline' is reported, then install
# libncurses-dev and libreadline-dev (and rebuild)
#
#export PYTHONSTARTUP=~/.pythonrc.py

# For Python's virtual env:
export PATH=${PATH}:${HOME}/.local/bin

alias psm='echo "COMMAND            PID %CPU   VSZ USER"; ps -e -o args,pid,pcpu,vsz,user | grep $(whoami)'

export TRASH=$HOME/tmp/Trash


export LOGMX_ROOT="${SOFTWARE_ROOT}/LogMX/LogMX-current-install"
export PATH="${LOGMX_ROOT}:${PATH}"


export ERLANG_ROOT="${SOFTWARE_ROOT}/Erlang"
export PATH="${ERLANG_ROOT}/Erlang-current-install/bin:${ERLANG_ROOT}/Erlang-current-install/lib/erlang/:${PATH}"


set -o emacs
unset PROFILE_LOADED


# Do not overwrite any already-set (ex: contextual) information:

if [ -z "${CEYLAN_ROOT}" ]; then
   export CEYLAN_ROOT="${SOFTWARE_ROOT}/ceylan"
fi

if [ -z "${CEYLAN_HEAVY}" ]; then
   export CEYLAN_HEAVY=${CEYLAN_ROOT}/heavy
fi

if [ -z "${CEYLAN_SNAKE}" ]; then
   export CEYLAN_SNAKE=${CEYLAN_ROOT}/snake
fi

if [ -z "${CEYLAN_HULL}" ]; then
   export CEYLAN_HULL=${CEYLAN_ROOT}/hull
fi

if [ -z "${CEYLAN_MYRIAD}" ]; then
   export CEYLAN_MYRIAD=${CEYLAN_ROOT}/myriad
fi

if [ -z "${CEYLAN_WOOPER}" ]; then
   export CEYLAN_WOOPER=${CEYLAN_ROOT}/wooper
fi

if [ -z "${CEYLAN_TRACES}" ]; then
   export CEYLAN_TRACES=${CEYLAN_ROOT}/traces
fi

if [ -z "${CEYLAN_SEAPLUS}" ]; then
   export CEYLAN_SEAPLUS=${CEYLAN_ROOT}/seaplus
fi

if [ -z "${CEYLAN_MOBILE}" ]; then
   export CEYLAN_MOBILE=${CEYLAN_ROOT}/mobile
fi

if [ -z "${CEYLAN_LEEC}" ]; then
   export CEYLAN_LEEC=${CEYLAN_ROOT}/leec
fi

if [ -z "${CEYLAN_CURRY}" ]; then
   export CEYLAN_CURRY=${CEYLAN_ROOT}/curry
fi

if [ -z "${CEYLAN_SNAKE}" ]; then
   export CEYLAN_SNAKE=${CEYLAN_ROOT}/snake
fi


# ':${CEYLAN_MYRIAD}/src/apps/generate-password' removed, as, in
# ${SOFTWARE_ROOT}/bin, generate-password.sh is expected to be a symlink to the
# right script:
#
export PATH=${CEYLAN_HULL}:${CEYLAN_BIN}:${CEYLAN_MYRIAD}/src/scripts:${PATH}

export EDITOR=emacs
#export EDITOR='emacsclient --alternate-editor=emacs'

# Options for X servers:
#
# (note: -Y, i.e. trusted mode, shall be preferred to ${SSH_X_OPT, otherwise
# your AltGr may not work in most text editors...)
SSH_X_OPT="-Y"

alias mkcd='function _mkcd(){ mkdir "$1" && cd "$1"; };_mkcd'

# Change to the dirname of the specified path (stripping the last part of that
# path):
#
alias cdp='function _cdp(){ cd "$(dirname $1)"; };_cdp'

# Keyboard configuration moved to '~/.bash_profile'.


#echo "-- Bash basically initialized --"
