# 'configure-template.ac' is the source file in charge of dealing
# with the Autoconf/Automake macros to be found in the generated
# 'configure.ac'. One can use the 'checkConfigure.sh' script to check
# whether the corresponding 'configure.ac' is the appropriate result.

# This is a way of customizing settings prior to the whole 'autogen.sh' process,
# leading to have the build system generated. 


AC_PREREQ(2.59)


# Declaration section for the Autotools macros.


AC_INIT([ST_PROJECT_NAME],[ST_VERSION],[ST_MAILING_LIST_BUGTRACKING])

AC_CONFIG_SRCDIR([ST_CONFIG_HEADER.in])
AC_CONFIG_AUX_DIR([src/conf/build])

# Detects the canonical host and target build environment :
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE

# CeylanTemporaryConfig.h is the first basic config file to be generated,
# it contains what classically is in a usual config.h.
# It is then transformed by AX_PREFIX_CONFIG_H into CeylanConfig.h, whose
# defines are prefixed and have include guards.
# Finally AC_CONFIG_COMMANDS updates CeylanConfig.h so that symbols
# such as CEYLAN_HAVE_CTIME are replaced by CEYLAN_USES_CTIME.

# This macro adds '-DHAVE_CONFIG_H' in DEFS for compiler, but Ceylan
# ignores this too common (hence risky) symbol, and uses 
# CEYLAN_USES_CONFIG_H instead.
AC_CONFIG_HEADERS([ST_CONFIG_HEADER],[],[])
CPPFLAGS="-DCEYLAN_USES_CONFIG_H $CPPFLAGS"
AC_SUBST(CPPFLAGS)


# CeylanConfig.h will be the only config header to be installed.
# It is obtained from ST_CONFIG_HEADER by renaming all entries that may 
# clash when included by some user code.
# Ex : HAVE_CTIME is ultimately renamed to CEYLAN_USES_CTIME
AX_PREFIX_CONFIG_H([src/code/CeylanConfig.h])

# How to use it remains unclear : #AC_CONFIG_HEADERS([ST_CONFIG_HEADER:src/conf/build/CeylanConfig-header.in:src/conf/build/CeylanConfig-footer.in])



# Naming section.

PROJECT_NAME=ST_PROJECT_NAME
AC_SUBST(PROJECT_NAME)

UNIX_PROJECT_NAME=ST_UNIX_PROJECT_NAME
AC_SUBST(UNIX_PROJECT_NAME)



# Ceylan version numbers for current release.


# Usual versioning. 


CEYLAN_MAJOR_VERSION=ST_MAJOR_VERSION
AC_SUBST(CEYLAN_MAJOR_VERSION)

CEYLAN_MINOR_VERSION=ST_MINOR_VERSION
AC_SUBST(CEYLAN_MINOR_VERSION)

CEYLAN_RELEASE=ST_RELEASE
AC_SUBST(CEYLAN_RELEASE)


CEYLAN_VERSION=ST_VERSION
AC_SUBST(CEYLAN_VERSION)

CEYLAN_FULL_VERSION=ST_FULL_VERSION
AC_SUBST(CEYLAN_FULL_VERSION)



# Libtool-style versioning.

CEYLAN_MAJOR_ANCESTOR=ST_MAJOR_ANCESTOR
AC_SUBST(CEYLAN_MAJOR_ANCESTOR)

# From previous variables Libtool version can be deduced :

CEYLAN_LT_RELEASE=$CEYLAN_VERSION
AC_SUBST(CEYLAN_LT_RELEASE)


CEYLAN_LT_CURRENT=$CEYLAN_MAJOR_VERSION
AC_SUBST(CEYLAN_LT_CURRENT)

CEYLAN_LT_REVISION=$CEYLAN_MINOR_VERSION
AC_SUBST(CEYLAN_LT_REVISION)

CEYLAN_LT_AGE=`expr $CEYLAN_MAJOR_VERSION - $CEYLAN_MAJOR_ANCESTOR`
AC_SUBST(CEYLAN_LT_AGE)


CEYLAN_LIBTOOL_VERSION="$CEYLAN_LT_CURRENT.$CEYLAN_LT_REVISION.$CEYLAN_LT_AGE"
# The CEYLAN_LIBTOOL_VERSION symbol is used to update
# generic/CeylanHeaderVersion.cc with the actual Ceylan libtool version, 
# so that this header-embedded version can be compared with the library
# version (see : test/ceylan.m4). 
AC_SUBST(CEYLAN_LIBTOOL_VERSION)


# The value must be quoted with "" since it will be an argument of a C++ 
# function call.
# See : generic/CeylanUtils.cc for the library-embedded version.
AC_DEFINE_UNQUOTED([LIBTOOL_VERSION],
	["$CEYLAN_LIBTOOL_VERSION"],
	[Current Libtool version for the Ceylan library])


# Archive base directory. 
CEYLAN_ARCHIVE_DIR="\${HOME}/Archive/${PROJECT_NAME}"
AC_SUBST(CEYLAN_ARCHIVE_DIR)


# Documentation section.

CEYLAN_SF_WEB_SERVER="sourceforge.net"
AC_SUBST(CEYLAN_SF_WEB_SERVER)

CEYLAN_SF_URL="http://${UNIX_PROJECT_NAME}.${CEYLAN_SF_WEB_SERVER}"
AC_SUBST(CEYLAN_SF_URL)

CEYLAN_SF_VERSION_URL="${CEYLAN_SF_URL}/${PROJECT_NAME}-${CEYLAN_VERSION}"
AC_SUBST(CEYLAN_SF_VERSION_URL)

CEYLAN_MIRROR_WEB_SERVER="esperide.com"
AC_SUBST(CEYLAN_MIRROR_WEB_SERVER)

# Used not to mix projects and versions :
CEYLAN_CURRENT_VERSION_PREFIX="${PROJECT_NAME}-${CEYLAN_VERSION}"
AC_SUBST(CEYLAN_CURRENT_VERSION_PREFIX)


# Local directories.
# They are gathered here since doxygen configuration file needs them also.

# Local root of the whole Ceylan documentation :
# If the user wants to redefine his prefix, then he should reconfigure the
# package : if not hardcoding the prefix at the configure step, then for
# example we could not use autoconf to generate doxygen.conf which needs
# a full expanded output path (hence not containing ${prefix}).
CEYLAN_LOCAL_DOC_DIR="\${prefix}/share/${PROJECT_NAME}/doc"
AC_SUBST(CEYLAN_LOCAL_DOC_DIR)

# Local root of the whole Ceylan html documentation :
# (ex : PREFIX/doc/web)
CEYLAN_LOCAL_WEB_DIR=$CEYLAN_LOCAL_DOC_DIR/web
AC_SUBST(CEYLAN_LOCAL_WEB_DIR)

# Local root of the whole Ceylan general html documentation :
# (not specific to any version; no special subdirectory used)
# (ex : PREFIX/doc/web)
CEYLAN_LOCAL_WEB_SHARED_DIR=$CEYLAN_LOCAL_WEB_DIR
AC_SUBST(CEYLAN_LOCAL_WEB_SHARED_DIR)


# Local root of the Ceylan HTML documentation specific to this current version :
# (ex : PREFIX/doc/web/Ceylan-u.v)
CEYLAN_LOCAL_WEB_CURRENT_VERSION_DIR=$CEYLAN_LOCAL_WEB_DIR/$CEYLAN_CURRENT_VERSION_PREFIX
AC_SUBST(CEYLAN_LOCAL_WEB_CURRENT_VERSION_DIR)


# Local root of the Ceylan API HTML documentation specific to this current
# version :
# (ex : PREFIX/doc/web/Ceylan-u.v/api)
CEYLAN_LOCAL_WEB_CURRENT_VERSION_API_DIR=$CEYLAN_LOCAL_WEB_DIR/$CEYLAN_CURRENT_VERSION_PREFIX/api
AC_SUBST(CEYLAN_LOCAL_WEB_CURRENT_VERSION_API_DIR)



# Support section.

CEYLAN_MAILING_LIST_SUPPORT=ST_MAILING_LIST_SUPPORT
AC_SUBST(CEYLAN_MAILING_LIST_SUPPORT)

CEYLAN_MAILING_LIST_BUGTRACKING=ST_MAILING_LIST_BUGTRACKING
AC_SUBST(CEYLAN_MAILING_LIST_BUGTRACKING)



# If the user did not override CXXFLAGS, provide our own default settings :
# (in all cases the clumsy "-g -O2" automake default is removed) 
CXXFLAGS=${CXXFLAGS-""}


# Checks for programs :
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET


# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT

# Only headers independent from all Ceylan features are checked here : 
AC_CHECK_HEADERS([math.h limits.h stdint.h string.h strings.h time.h sys/time.h utime.h termios.h netdb.h netinet/in.h arpa/inet.h unistd.h sys/utsname.h sys/sysinfo.h conio.h fcntl.h sys/ioctl.h errno.h sys/types.h netinet/in.h netinet/tcp.h xti.h byteswap.h machine/bswap.h sys/byteorder.h])


# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_C_VOLATILE

# Checks for libraries.


# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
# No, 'malloc' was only in a comment : AC_FUNC_MALLOC
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_UTIME_NULL


# Only functions independent from all Ceylan features are checked here. 
# Following functions were not tested anymore since they were supposed to be
# available thanks to '#include <cmath>', they are now checked again as
# Solaris does not define floorf, sinf, etc. : 
#	- ceil, ceilf, ceill
#	- cos, cosf, cosl
#	- exp, expf, expl
#	- fabs, fabsf, fabsl
#	- floor, floorf, floorl 
#	- pow, powf, powl
#	- sin, sinf, sinl
#	- sqrt, sqrtf, sqrtl
# However the following functions are still tested since they are lacking
# on some platforms (ex : OpenBSD 3.8)
#	- round, roundf, roundl

AC_CHECK_FUNCS([round roundf roundl isdigit islower isupper abs fabsf labs llabs floorf ceilf expf powf sqrtf cosf sinf exit putenv getenv setenv unsetenv strdup strerror sleep time ctime localtime gettimeofday utime sysinfo uname stat mkdir chdir unlink rename rmdir getcwd gethostname sethostname getdomainname setdomainname gethostbyname gethostbyaddr memset bzero memcpy])


# Only symbols independent from all Ceylan features are checked here : 

AC_CHECK_DECLS([O_RDONLY, O_WRONLY, O_RDWR, O_CREAT, O_EXCL, O_TRUNC, O_APPEND],[],[AC_MSG_ERROR(at least one flag for opening file not available)],[
		#ifdef HAVE_FCNTL_H
		#include <fcntl.h>
		#endif // HAVE_FCNTL_H		
            ])


# Build section.


CEYLAN_TEST_DIR="\${exec_prefix}/tests"
AC_SUBST(CEYLAN_TEST_DIR)


CEYLAN_GENERIC="\$(top_srcdir)/src/code/generic"
AC_SUBST(CEYLAN_GENERIC)

CEYLAN_INTERFACES="\$(top_srcdir)/src/code/interfaces"
AC_SUBST(CEYLAN_INTERFACES)

CEYLAN_LOGS="\$(top_srcdir)/src/code/logs"
AC_SUBST(CEYLAN_LOGS)

CEYLAN_MATHS="\$(top_srcdir)/src/code/maths"
AC_SUBST(CEYLAN_MATHS)

CEYLAN_MIDDLEWARE="\$(top_srcdir)/src/code/middleware"
AC_SUBST(CEYLAN_MIDDLEWARE)

CEYLAN_MODULES="\$(top_srcdir)/src/code/modules"
AC_SUBST(CEYLAN_MODULES)

CEYLAN_SYSTEM="\$(top_srcdir)/src/code/system"
AC_SUBST(CEYLAN_SYSTEM)

CEYLAN_NETWORK="\$(top_srcdir)/src/code/network"
AC_SUBST(CEYLAN_NETWORK)


# Substitution script to update various project templates.
CEYLAN_SUBSTITUTE="\$(top_srcdir)/src/code/scripts/shell/substitute.sh"
AC_SUBST(CEYLAN_SUBSTITUTE)


# Compiler-specific optimization flags.


# Debug versus optimizations section.

# See if the user wants aggressive optimizations of the code :
AC_ARG_ENABLE(debug,
	AS_HELP_STRING(--enable-debug,[disable aggressive optimizations [[default=yes]]]),,enable_debug=yes)
if test x$enable_debug = xyes; then

	# Debug requested :
	DEBUG=0
	DEBUG_EVENTS=0
	DEBUG_DEMANGLE=0
	DEBUG_LOG=0
	DEBUG_SYSTEM=0
	DEBUG_THREADS=0
	DEBUG_LOW_LEVEL_STREAMS=0
	DEBUG_NETWORK_CLIENTS=0
	DEBUG_NETWORK_SERVERS=0
	DEBUG_PROTOCOL_SERVERS=0
	DEBUG_MARSHALLERS=0
	
	AM_CXXFLAGS="$AM_CXXFLAGS -g" 
    if test x$ac_cv_cxx_compiler_gnu = xyes; then
		# Add -pg to manage profile information for gprof.
		# -fstack-check used to be specified but wroke havoc in generated code,
		# causing crashes and various valgrind reports.
		#AM_CXXFLAGS="$AM_CXXFLAGS -ggdb -O0 -fno-inline -fbounds-check -ftrapv -fnon-call-exceptions"
		# Safest settings :
		AM_CXXFLAGS="$AM_CXXFLAGS -ggdb -O0 -fno-inline"				
	fi	 
else

	# Aggressive optimizations :
	DEBUG=0
	DEBUG_EVENTS=0
	DEBUG_DEMANGLE=0	
	DEBUG_LOG=0
	DEBUG_SYSTEM=0
	DEBUG_THREADS=0
	DEBUG_LOW_LEVEL_STREAMS=0
	DEBUG_NETWORK_CLIENTS=0
	DEBUG_NETWORK_SERVERS=0
	DEBUG_PROTOCOL_SERVERS=0
	DEBUG_MARSHALLERS=0
	
    if test x$ac_cv_cxx_compiler_gnu = xyes; then
		# -fomit-frame-pointer : may prevent debugging on some platforms
		# -ffast-math : not requesting exact IEEE or ISO implementation
		# rules/specifications
        AM_CXXFLAGS="$AM_CXXFLAGS -g0 -O3 -fexpensive-optimizations -fomit-frame-pointer -ffast-math -funroll-loops"
    fi
	
	AM_LDFLAGS="$AM_LDFLAGS --strip-all"
	
    case "$target" in
        i486-*-*)
            if test x$ac_cv_cxx_compiler_gnu = xyes; then
                AM_CXXFLAGS="$AM_CXXFLAGS -march=i486"
            fi
            ;;
        i?86-*-*)
            if test x$ac_cv_cxx_compiler_gnu = xyes; then
                AM_CXXFLAGS="$AM_CXXFLAGS -march=pentium -mcpu=pentiumpro"
            fi
            ;;
        *-*-osf*)
            if test x$ac_cv_cxx_compiler_gnu != xyes; then
                AM_CXXFLAGS="$AM_CXXFLAGS -g3 -fast -arch host"
            fi
            ;;
    esac
fi

AC_DEFINE_UNQUOTED([DEBUG],
	[$DEBUG],
	[Define to 1 if generic debug mode is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_EVENTS],
	[$DEBUG_EVENTS],
	[Define to 1 if debug mode for events is to be enabled])
	
AC_DEFINE_UNQUOTED([DEBUG_DEMANGLE],
	[$DEBUG_DEMANGLE],
	[Define to 1 if debug mode for name mangling is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_LOG],
	[$DEBUG_LOG],
	[Define to 1 if debug mode for log system is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_SYSTEM],
	[$DEBUG_SYSTEM],
	[Define to 1 if debug mode for system layer is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_THREADS],
	[$DEBUG_THREADS],
	[Define to 1 if debug mode for threads is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_LOW_LEVEL_STREAMS],
	[$DEBUG_LOW_LEVEL_STREAMS],
	[Define to 1 if debug mode for low-level streams is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_NETWORK_CLIENTS],
	[$DEBUG_NETWORK_SERVERS],
	[Define to 1 if debug mode for network clients is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_NETWORK_SERVERS],
	[$DEBUG_NETWORK_SERVERS],
	[Define to 1 if debug mode for network servers is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_PROTOCOL_SERVERS],
	[$DEBUG_PROTOCOL_SERVERS],
	[Define to 1 if debug mode for protocol servers is to be enabled])

AC_DEFINE_UNQUOTED([DEBUG_MARSHALLERS],
	[$DEBUG_MARSHALLERS],
	[Define to 1 if debug mode for marshallers is to be enabled])




# Warning and error section.

# Add verbose warnings by default, and allow ANSI compliance checking :
AC_ARG_ENABLE(strict-ansi,
	AS_HELP_STRING(--enable-strict-ansi,[enable strict ANSI compliance build [[default=yes]]]),,enable_strict_ansi=yes)
if test x$ac_cv_cxx_compiler_gnu = xyes; then
	# Basically paranoïd in all cases :
	
	# Following warnings are not used, explanations follow : 
	#    -Weffc++ : the standard library headers trigger zillions of warnings.
	#    -Waggregate-return : even a simple std::string is an aggregate.
	#    -Wunused-parameter : inherited methods may not use some of their
	# parameters, not wanting to freeze API with "__attribute__" keyword.
	#    -Wpadded : add it if wanting to reorder fields of structures to save
	# some bytes.
	#    -Wmissing-noreturn : would force declaring __attribute__ ((noreturn))
	# in every method which throws exceptions about unimplemented feature
	#	 -Wold-style-cast : some standard macros (WIFEXITED, WEXITSTATUS, 
	# etc.) expand into old-style C casts
	#    -Wunreachable-code : temporarily removed because of gcc 4.0.2
	# incorrecly complaining : 'warning: will never be executed' in Exception
	# constructor
	#
    AM_CXXFLAGS="$AM_CXXFLAGS -Wall -Werror -Woverloaded-virtual -W -Wfloat-equal -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wsign-compare -Wmissing-format-attribute -Wpacked -Wredundant-decls -Wno-unused-parameter -Wno-unknown-pragmas"
    if test x$enable_strict_ansi = xyes; then
		# Do not know what "-D_XOPEN_SOURCE" would change.
        AM_CXXFLAGS="$AM_CXXFLAGS -ansi -pedantic-errors"
    fi
fi



# Colors for build output section.

# Some color definitions, to be more readable.

# In the case your terminal does not support color, use :
# --disable-colored-build

# See also : function updateColorSupport of
# Ceylan-x.y/src/code/scripts/termUtils.sh 

# Text color codes :

black_text=30
red_text=31
green_text=32
yellow_text=33
blue_text=34
magenta_text=35
cyan_text=36
white_text=37


# Background color codes :

black_back=40
red_back=41
green_back=42
yellow_back=43
blue_back=44
magenta_back=45
cyan_back=46
white_back=47


# Text attributes :

none_att=00
bold_att=01
underscore_att=04
blink_att=05
reverse_att=07
concealed_att=08

default_att=$none_att


# Pre defined text styles :

# Uses terminal features such as fancy make colors by default :
AC_ARG_ENABLE(colored-build,
	AS_HELP_STRING(--enable-colored-build,[enable colored build [[default=yes]]]),,enable_colored_build=yes)
if test x$enable_colored_build = xyes; then

	# The quadrigram '@<:@' is needed to allow for an unbalanced '[' :
	
	CEYLAN_DEFAULT_STYLE="@<:@${default_att};${white_text};${black_back}m"
	CEYLAN_TITLE_STYLE="@<:@${default_att};${magenta_text};${black_back}m"
	CEYLAN_ITEM_STYLE="@<:@${default_att};${cyan_text};${black_back}m"
	CEYLAN_COMMAND_STYLE="@<:@${default_att};${cyan_text};${black_back}m"
	CEYLAN_MAKE_STYLE="@<:@${default_att};${green_text};${black_back}m"
	CEYLAN_COMPILE_STYLE="@<:@${default_att};${cyan_text};${black_back}m"
	CEYLAN_LINK_STYLE="@<:@${default_att};${magenta_text};${black_back}m"
	CEYLAN_INSTALL_STYLE="@<:@${default_att};${blue_text};${black_back}m"
	CEYLAN_CLEAN_STYLE="@<:@${default_att};${yellow_text};${black_back}m"
	CEYLAN_ERROR_STYLE="@<:@${default_att};${white_text};${red_back}m"
	CEYLAN_WARNING_STYLE="@<:@${default_att};${yellow_text};${black_back}m"

else

	CEYLAN_DEFAULT_STYLE=""
	CEYLAN_TITLE_STYLE=""
	CEYLAN_ITEM_STYLE=""
	CEYLAN_COMMAND_STYLE=""
	CEYLAN_MAKE_STYLE=""
	CEYLAN_COMPILE_STYLE=""
	CEYLAN_LINK_STYLE=""
	CEYLAN_INSTALL_STYLE=""
	CEYLAN_CLEAN_STYLE=""
	CEYLAN_ERROR_STYLE=""
	CEYLAN_WARNING_STYLE=""

fi

AC_SUBST(CEYLAN_DEFAULT_STYLE)
AC_SUBST(CEYLAN_TITLE_STYLE)
AC_SUBST(CEYLAN_ITEM_STYLE)
AC_SUBST(CEYLAN_COMMAND_STYLE)
AC_SUBST(CEYLAN_MAKE_STYLE)
AC_SUBST(CEYLAN_COMPILE_STYLE)
AC_SUBST(CEYLAN_LINK_STYLE)
AC_SUBST(CEYLAN_INSTALL_STYLE)
AC_SUBST(CEYLAN_CLEAN_STYLE)
AC_SUBST(CEYLAN_ERROR_STYLE)
AC_SUBST(CEYLAN_WARNING_STYLE)



# Checks whether regular expression feature should and can be activated.
# CEYLAN_USES_REGEX depends notably on :
#	- choice : whether user requests them
#   - headers : regex.h 
#	- functions : regex_t, regcomp, regexec, regfree 
#   - symbols : REG_EXTENDED, REG_NOSUB
#   - see also : AM_WITH_REGEX to choose regex over rx
#	- use : recommended
CheckRegexFeature()
{

	# Are Regex wanted ?
	CEYLAN_USES_REGEX=0
	AC_ARG_ENABLE([regex],
		AS_HELP_STRING(--enable-regex,[use Ceylan regular expressions feature [[default=yes]]]),
		[case "${enableval}" in
			yes) regex=yes ;;
			no)  regex=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-regex) ;;
		esac],[regex=yes])
	# If wanted, are regular expressions available ?	
	AC_MSG_CHECKING([whether Ceylan regex feature is wanted])
	if test x$regex = xyes; then
		AC_MSG_RESULT([yes])
		have_regex=yes
		AC_CHECK_HEADERS([regex.h],[],[have_regex=no])
		if test x$have_regex = xyes; then
			AC_CHECK_FUNCS([regcomp regexec regfree],[],[have_regex=no])
			# regex_t, REG_EXTENDED and REG_NOSUB could be tested as well.
		fi	
		if test x$have_regex = xyes; then
			CEYLAN_USES_REGEX=1
		else	
			AC_MSG_WARN([Regular expression support requested but not available, disabling it])
		fi
		AC_MSG_CHECKING([whether Ceylan regex feature is enabled])
		AC_MSG_RESULT([$have_regex])
	else
		# Regex not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_REGEX],
		[$CEYLAN_USES_REGEX],
		[Define to 1 if Ceylan is to use regular expressions internally])

}



# Checks whether multithreading feature should and can be activated.
# CEYLAN_USES_THREADS depends on :
#   - headers : pthread.h
#   - functions : pthread_create pthread_cond_destroy pthread_cond_timedwait
# pthread_cond_signal pthread_cond_broadcast pthread_mutex_lock
# pthread_mutex_unlock
#   - symbols : 
#   - use : when pthreads if available for example, otherwise use an
# abstraction layer such as SDL
#	- see also : CheckPTHREAD in SDL's configure.in
CheckMultithreadFeature()
{

	# Is multithread support wanted ?
	CEYLAN_USES_THREADS=0
	AC_ARG_ENABLE([multithread],
		AS_HELP_STRING(--enable-multithread,[use Ceylan multithread feature [[default=yes]]]),
		[case "${enableval}" in
			yes) multithread=yes ;;
			no)  multithread=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-multithread) ;;
		esac],[multithread=yes])
	# If wanted, is multithreading available ?	
	AC_MSG_CHECKING([whether Ceylan multithread feature is wanted])
	if test x$multithread = xyes; then
		AC_MSG_RESULT([yes])
		# Determines which settings should be tried on this platform :
		case "$target" in
			*-*-bsdi*)
            	pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
            	pthread_lib=""
            	;;
        	*-*-darwin*)
            	pthread_cflags="-D_THREAD_SAFE"
				# causes Carbon.p complaints?
				# pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
            	;;
        	*-*-freebsd*)
           		pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
            	pthread_lib="-pthread"
            	;;
			*-*-netbsd*)
				# -I/usr/pkg/include removed since its pthread.h had 
				# conflicting types with /usr/include/pthread_types.h :
				pthread_cflags="-D_REENTRANT"
				# -lsem removed, it does not exist with NetBSD 2.0.2 :
				pthread_lib="-L/usr/pkg/lib -lpthread"
				# Needed for any future AC_RUN_IFELSE :
				export LD_LIBRARY_PATH="/usr/pkg/lib:$LD_LIBRARY_PATH"
				;;
        	*-*-openbsd*)
            	pthread_cflags="-D_REENTRANT"
            	pthread_lib="-pthread"
            	;;
        	*-*-solaris*)
            	pthread_cflags="-D_REENTRANT"
            	pthread_lib="-lpthread -lposix4"
            	;;
        	*-*-sysv5*)
            	pthread_cflags="-D_REENTRANT -Kthread"
            	pthread_lib=""
            	;;
        	*-*-irix*)
            	pthread_cflags="-D_SGI_MP_SOURCE"
            	pthread_lib="-lpthread"
            	;;
        	*-*-aix*)
            	pthread_cflags="-D_REENTRANT -mthreads"
            	pthread_lib="-lpthread"
            	;;
        	*-*-hpux11*)
            	pthread_cflags="-D_REENTRANT"
            	pthread_lib="-L/usr/lib -lpthread"
            	;;
        	*-*-qnx*)
            	pthread_cflags=""
            	pthread_lib=""
            	;;
        	*-*-osf*)
            	pthread_cflags="-D_REENTRANT"
            	if test x$ac_cv_prog_gcc = xyes; then
            		pthread_lib="-lpthread -lrt"
            	else
            		pthread_lib="-lpthread -lexc -lrt"
            	fi
            	;;
        	*)
            	pthread_cflags="-D_REENTRANT"
            	pthread_lib="-lpthread"
            	;;
		esac
			
        # Saves the original compiler flags and libraries :
        ac_save_cflags="$CFLAGS"
		ac_save_libs="$LIBS"
        # Adds (for the tests) the pthread compiler flags and libraries :
        CFLAGS="$CFLAGS $pthread_cflags"
		LIBS="$LIBS $pthread_lib"
		have_multithread=yes
		AC_CHECK_HEADERS([pthread.h],[],[have_multithread=no])
		if test x$have_multithread = xyes; then
			# Needs LIBS correctly configured :
			AC_CHECK_FUNCS([pthread_create pthread_cond_destroy pthread_cond_timedwait pthread_cond_signal pthread_cond_broadcast pthread_mutex_init pthread_mutex_lock pthread_mutex_unlock],[],[have_multithread=no])
		fi	
		if test x$have_multithread = xyes; then
			CEYLAN_USES_THREADS=1 
			AM_CXXFLAGS="$AM_CXXFLAGS $pthread_cflags"  
		else	
			AC_MSG_WARN([Multithread support requested but not available, disabling it])
			# Restores previous settings :
			CFLAGS=$ac_save_cflags
			LIBS=$ac_save_libs
		fi
		AC_MSG_CHECKING([whether Ceylan multithread feature is enabled])
		AC_MSG_RESULT([$have_multithread])
	else
		# Multithread not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_THREADS],
		[$CEYLAN_USES_THREADS],
		[Define to 1 if Ceylan is to provide multithreading support])
		
}


# Checks whether network support feature should and can be activated.
# CEYLAN_USES_NETWORK depends on :
#   - headers : sys/socket.h
#   - functions : socket
#   - symbols :
#   - use : when network layer is desired and has been ported
#   - note : basic network informations remain available (get/set of host name,
# of domain name, etc.) even if this feature is not enabled
CheckNetworkFeature()
{

	# Is network support wanted ?
	CEYLAN_USES_NETWORK=0
	AC_ARG_ENABLE([network],
		AS_HELP_STRING(--enable-network,[use Ceylan network feature [[default=yes]]]),
		[case "${enableval}" in
			yes) network=yes ;;
			no)  network=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-network) ;;
		esac],[network=yes])
	# If wanted, is network available ?	
	AC_MSG_CHECKING([whether Ceylan network feature is wanted])
	if test x$network = xyes; then
		AC_MSG_RESULT([yes])
		have_network=yes
		AC_CHECK_HEADERS([sys/socket.h],[],[have_network=no])
		if test x$have_network = xyes; then
			AC_CHECK_FUNCS([socket],[],[have_network=no])
		fi	
		if test x$have_network = xyes; then
			CEYLAN_USES_NETWORK=1
		else	
			AC_MSG_WARN([Network support requested but not available, disabling it])
		fi
		AC_MSG_CHECKING([whether Ceylan network support feature is enabled])
		AC_MSG_RESULT([$have_network])
	else
		# Network not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_NETWORK],
		[$CEYLAN_USES_NETWORK],
		[Define to 1 if Ceylan is to provide network support])

}



# Checks whether file descriptor feature should and can be activated.
# CEYLAN_USES_FILE_DESCRIPTORS depends on :
#   - headers : unistd.h 
#   - functions : dup dup2 pipe
#   - symbols :
#   - use : when supported, i.e. mostly on UNIX
CheckFileDescriptorFeature()
{

	# Is file descriptor support wanted ?
	CEYLAN_USES_FILE_DESCRIPTORS=0
	AC_ARG_ENABLE([file-descriptor],
		AS_HELP_STRING(--enable-file-descriptor,[use Ceylan file descriptor feature [[default=yes]]]),
		[case "${enableval}" in
			yes) file_descriptor=yes ;;
			no)  file_descriptor=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-file-descriptor) ;;
		esac],[file_descriptor=yes])
	# If wanted, are file descriptors available ?	
	AC_MSG_CHECKING([whether Ceylan file descriptor feature is wanted])
	if test x$file_descriptor = xyes; then
		AC_MSG_RESULT([yes])
		have_file_descriptor=yes
		AC_CHECK_HEADERS([fcntl.h sys/select.h unistd.h],[],[have_file_descriptor=no])
		if test x$have_file_descriptor = xyes; then
			AC_CHECK_FUNCS([dup dup2 pipe],[],[have_file_descriptor=no])
		fi	
		if test x$have_file_descriptor = xyes; then
			CEYLAN_USES_FILE_DESCRIPTORS=1
		else	
			AC_MSG_WARN([File descriptor support requested but not available, disabling it])
		fi
		AC_MSG_CHECKING([whether Ceylan file descriptor support feature is enabled])
		AC_MSG_RESULT([$have_file_descriptor])
	else
		# File descriptor not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_FILE_DESCRIPTORS],
		[$CEYLAN_USES_FILE_DESCRIPTORS],
		[Define to 1 if Ceylan is to provide file descriptor support])
		
}


# Checks whether symbolic link feature should and can be activated.
# CEYLAN_USES_SYMBOLIC_LINKS depends on :
#   - headers : unistd.h
#   - functions : symlink 
#   - symbols :
#   - use : when supported, i.e. mostly on UNIX
CheckFileSymbolicLinkFeature()
{

	# Is symbolic link support wanted ?
	CEYLAN_USES_SYMBOLIC_LINKS=0
	AC_ARG_ENABLE([symbolic-link],
		AS_HELP_STRING(--enable-symbolic-link,[use Ceylan symbolic link feature [[default=yes]]]),
		[case "${enableval}" in
			yes) symbolic_link=yes ;;
			no)  symbolic_link=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-symbolic-link) ;;
		esac],[symbolic_link=yes])
	# If wanted, are symbolic links available ?	
	AC_MSG_CHECKING([whether Ceylan symbolic link feature is wanted])
	if test x$symbolic_link = xyes; then
		AC_MSG_RESULT([yes])
		have_symbolic_link=yes
		AC_CHECK_HEADERS([unistd.h],[],[have_symbolic_link=no])
		if test x$have_symbolic_link = xyes; then
			AC_CHECK_FUNCS([symlink],[],[have_symbolic_link=no])
		fi	
		if test x$have_symbolic_link = xyes; then
			CEYLAN_USES_SYMBOLIC_LINKS=1
		else	
			AC_MSG_WARN([Symbolic link support requested but not available, disabling it])
		fi
		AC_MSG_CHECKING([whether Ceylan symbolic link support feature is enabled])
		AC_MSG_RESULT([$have_symbolic_link])
	else
		# Symbolic links not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_SYMBOLIC_LINKS],
		[$CEYLAN_USES_SYMBOLIC_LINKS],
		[Define to 1 if Ceylan is to provide symbolic link support])
		
}


# Checks whether advanced file attribute feature should and can be activated.
# CEYLAN_USES_ADVANCED_FILE_ATTRIBUTES depends on :
#   - headers : 
#   - functions :  
#   - symbols : group/other in addition to owner (ex : S_IRGRP),
# supplementary opening flags(ex : O_NONBLOCK)
#   - use : not available with minGW for example
CheckAdvancedFileAttributeFeature()
{

	# Is advanced file attribute support wanted ?
	CEYLAN_USES_ADVANCED_FILE_ATTRIBUTES=0
	AC_ARG_ENABLE([advanced-file-attribute],
		AS_HELP_STRING(--enable-advanced-file-attribute,[use Ceylan advanced file attribute feature [[default=yes]]]),
		[case "${enableval}" in
			yes) advanced_file_attribute=yes ;;
			no)  advanced_file_attribute=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-advanced-file-attribute) ;;
		esac],[advanced_file_attribute=yes])
	# If wanted, is advanced file attribute support available ?	
	AC_MSG_CHECKING([whether Ceylan advanced file attribute feature is wanted])
	if test x$advanced_file_attribute = xyes; then
		AC_MSG_RESULT([yes])
		have_advanced_file_attribute=yes
		AC_CHECK_HEADERS([sys/stat.h fcntl.h],[],[have_advanced_file_attribute=no])
		if test x$have_advanced_file_attribute = xyes; then
			AC_CHECK_DECLS([S_IRGRP, S_IROTH, O_NONBLOCK, O_SYNC],[],[have_advanced_file_attribute=no],[
		#ifdef HAVE_FCNTL_H
		#include <fcntl.h>
		#endif // HAVE_FCNTL_H
		
		#ifdef HAVE_SYS_STAT_H
		#include <sys/stat.h>
		#endif // HAVE_SYS_STAT_H
		
			])
		fi	
		if test x$have_advanced_file_attribute = xyes; then
			CEYLAN_USES_ADVANCED_FILE_ATTRIBUTES=1
		else	
			AC_MSG_WARN([Advanced file attribute support requested but not available, disabling it])
		fi
		AC_MSG_CHECKING([whether Ceylan advanced file attribute feature is enabled])
		AC_MSG_RESULT([$have_advanced_file_attribute])
	else
		# Advanced file attribute not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_ADVANCED_FILE_ATTRIBUTES],
		[$CEYLAN_USES_ADVANCED_FILE_ATTRIBUTES],
		[Define to 1 if Ceylan is to provide advanced file attribute support])
}


# Checks whether file read/write lock feature should and can be activated.
# CEYLAN_USES_FILE_LOCKS depends on :
#   - headers : fcntl.h
#   - functions : fcntl
#   - symbols : 
#   - use : not available with minGW for example
#   - depends on : file descriptor support
CheckFileLockFeature()
{

	# Are file locks wanted ?
	CEYLAN_USES_FILE_LOCKS=0
	AC_ARG_ENABLE([file-lock],
		AS_HELP_STRING(--enable-file-lock,[use Ceylan file lock feature [[default=yes]]]),
		[case "${enableval}" in
			yes) file_lock=yes ;;
			no)  file_lock=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-file-lock) ;;
		esac],[file_lock=yes])
	# If wanted, are file locks available ?	
	AC_MSG_CHECKING([whether Ceylan file lock feature is wanted])
	if test x$file_lock = xyes; then
		AC_MSG_RESULT([yes])
		have_file_lock=yes
		AC_CHECK_HEADERS([fcntl.h],[],[have_file_lock=no])
		if test x$have_file_lock = xyes; then
			AC_CHECK_FUNCS([fcntl],[],[have_file_lock=no])
		fi	
		if test x$have_file_lock = xyes; then
			CEYLAN_USES_FILE_LOCKS=1
		else	
			AC_MSG_WARN([File lock support requested but not available, disabling it])
		fi
		# It is 'have_file_descriptor' indeed :
		if test x$have_file_descriptor = xno; then
			have_file_lock=no
			CEYLAN_USES_FILE_LOCKS=0
			AC_MSG_WARN(File lock support requested but depends on file descriptor support which is not available, disabling file lock support])
		fi
		AC_MSG_CHECKING([whether Ceylan file lock support feature is enabled])
		AC_MSG_RESULT([$have_file_lock])
	else
		# File lock not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_FILE_LOCKS],
		[$CEYLAN_USES_FILE_LOCKS],
		[Define to 1 if Ceylan is to provide file lock support])
		
}


# Checks whether the advanced process management feature should and 
# can be activated.
# CEYLAN_USES_ADVANCED_PROCESS_MANAGEMENT depends on :
#   - headers : sys/times.h sys/types.h unistd.h pwd.h
#   - functions : times fork getpid kill waitpid getpwuid geteuid execvp
#   - symbols : 
#   - use : not available with minGW for example
#   - depends on :
CheckAdvancedProcessManagementFeature()
{

	# Is advanced process management support wanted ?
	CEYLAN_USES_ADVANCED_PROCESS_MANAGEMENT=0
	AC_ARG_ENABLE([advanced-process-management],
		AS_HELP_STRING(--enable-advanced-process-management,[use Ceylan advanced process management feature [[default=yes]]]),
		[case "${enableval}" in
			yes) advanced_process_management=yes ;;
			no)  advanced_process_management=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-advanced-process-management) ;;
		esac],[advanced_process_management=yes])
	# If wanted, is advanced process management available ?	
	AC_MSG_CHECKING([whether Ceylan advanced process management feature is wanted])
	if test x$advanced_process_management = xyes; then
		AC_MSG_RESULT([yes])
		have_advanced_process_management=yes
		AC_CHECK_HEADERS([sys/times.h sys/types.h unistd.h pwd.h ],[],[have_advanced_process_management=no])
		if test x$have_advanced_process_management = xyes; then
			AC_CHECK_FUNCS([times fork getpid kill waitpid getpwuid geteuid execvp getpwuid ],[],[have_advanced_process_management=no])
		fi	
		if test x$have_advanced_process_management = xyes; then
			CEYLAN_USES_ADVANCED_PROCESS_MANAGEMENT=1
		else	
			AC_MSG_WARN([Advanced process management support requested but not available, disabling it])
		fi
		AC_MSG_CHECKING([whether Ceylan advanced process management feature is enabled])
		AC_MSG_RESULT([$have_advanced_process_management])
	else
		# Advanced process management not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_ADVANCED_PROCESS_MANAGEMENT],
		[$CEYLAN_USES_ADVANCED_PROCESS_MANAGEMENT],
		[Define to 1 if Ceylan is to support avanced process management])
}


# Checks whether the plugin feature should and can be activated.
# CEYLAN_USES_PLUGINS depends on :
#   - headers : dlfcn.h
#   - functions : dlopen dlsym dlclose dlerror
#   - symbols : 
#   - use : 
#   - depends on :
# Note that CheckPluginFeature must be called in all cases, since it is
# here that AM_PROG_LIBTOOL is called (it needs to be so due to
# pre-AC_PROG_LIBTOOL necessary calls for plugins).
CheckPluginFeature()
{

	# Is plugin support wanted ?
	CEYLAN_USES_PLUGINS=0
	AC_ARG_ENABLE([plugin-support],
		AS_HELP_STRING(--enable-plugin-support,[use Ceylan plugin support feature [[default=yes]]]),
		[case "${enableval}" in
			yes) plugin_support=yes ;;
			no)  plugin_support=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-plugin-support) ;;
		esac],[plugin_support=yes])
	# If wanted, is plugin support available ?	
	AC_MSG_CHECKING([whether Ceylan plugin support feature is wanted])
	if test x$plugin_support = xyes; then
		saved_LIBS="$LIBS"
		saved_CPPFLAGS="$CPPFLAGS"
		AC_MSG_RESULT([yes])
		have_plugin_support=yes
		CEYLAN_LTDLINCL="-I\${top_srcdir}/libltdl"
		# Built as static library :
		#CEYLAN_LIBLTDL="-L\${top_builddir}/libltdl -lltdl"
		CEYLAN_LIBLTDL=""
		# Performs the configure time checks required to build ltdl.o 
		# correctly (dlopen support) :
		AC_LIBTOOL_DLOPEN
		# Tells the libtool machinery that the package supports DLLs
		# on Windows :
		AC_LIBTOOL_WIN32_DLL
		CPPFLAGS="$CPPFLAGS $LTDLINCL $CEYLAN_LTDLINCL"
		LIBS="$LIBS $LIBLTDL $CEYLAN_LIBLTDL"
		# No AC_CHECK_HEADERS, AC_CHECK_LIB nor AC_CHECK_FUNCS performed since
		# ltld is embedded in our sources.
		have_plugin_support=yes		
		if test x$have_plugin_support = xyes; then
			CEYLAN_USES_PLUGINS=1
			AC_DEFINE_UNQUOTED([HAVE_LTDL_H],
				[1],
				[Define to 1 if you have the <ltdl.h> header file.])
			AC_CONFIG_SUBDIRS([libltdl])
			CEYLAN_EXTRA_LIBLTDL_SUBDIR=libltdl
			AC_SUBST(CEYLAN_EXTRA_LIBLTDL_SUBDIR)
			CEYLAN_EXTRA_LIBS="$CEYLAN_EXTRA_LIBS \${top_builddir}/libltdl/libltdl.la"
		else	
			AC_MSG_WARN([Plugin support requested but not available (no libltdl found), disabling it])
			LIBS="$saved_LIBS"
			CPPFLAGS="$saved_CPPFLAGS"
		fi
		AC_MSG_CHECKING([whether Ceylan plugin feature is enabled])
		AC_MSG_RESULT([$have_plugin_support])
		
	else
		# Plugin feature not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_PLUGINS],
		[$CEYLAN_USES_PLUGINS],
		[Define to 1 if Ceylan is to support plugin])

	# Cannot be specified before since using plugin requires to add for example
	# AC_LIBTOOL_DLOPEN before this call :
	AM_PROG_LIBTOOL

}


# Checks whether the signals feature should and can be activated.
# CEYLAN_USES_SIGNALS depends on :
#   - headers : signal.h
#   - functions : signal raise 
#   - symbols : SIG_IGN SIG_DFL SIGHUP
CheckSignalFeature()
{

	# Is signal support wanted ?
	CEYLAN_USES_SIGNALS=0
	AC_ARG_ENABLE([signal-support],
		AS_HELP_STRING(--enable-signal-support,[use Ceylan signal support feature [[default=yes]]]),
		[case "${enableval}" in
			yes) signal_support=yes ;;
			no)  signal_support=no ;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-signal-support) ;;
		esac],[signal_support=yes])
	# If wanted, is signal support available ?	
	AC_MSG_CHECKING([whether Ceylan signal support feature is wanted])
	if test x$signal_support = xyes; then
		AC_MSG_RESULT([yes])
		have_signals=yes
		AC_CHECK_HEADERS([signal.h],[],[have_signals=no])
		if test x$have_signals = xyes; then
			AC_CHECK_FUNCS([signal raise],[],[have_signals=no])
		fi	
		if test x$have_signals = xyes; then
			CEYLAN_USES_SIGNALS=1
		else	
			AC_MSG_WARN([Signal support requested but not available, disabling it])
		fi
		AC_MSG_CHECKING([whether Ceylan signal feature is enabled])
		AC_MSG_RESULT([$have_signals])
	else
		# Signals not wanted here :
		AC_MSG_RESULT([no])	
	fi
	
	AC_DEFINE_UNQUOTED([USES_SIGNALS],
		[$CEYLAN_USES_SIGNALS],
		[Define to 1 if Ceylan is to support signals])

}



# Section of non feature-based checkings.

 
# Checks whether mkdir takes one (ex : minGW) or two arguments (ex : Linux).
CheckMkdir()
{

	AC_MSG_CHECKING([whether mkdir takes two arguments])
	have_mkdir_two_args=no
	AC_TRY_COMPILE([
		#ifdef HAVE_SYS_STAT_H
		#include <sys/stat.h>
		#endif // HAVE_SYS_STAT_H
			
		#ifdef HAVE_SYS_TYPES_H
		#include <sys/types.h>
		#endif // HAVE_SYS_TYPES_H
            ],[
              mkdir( "aPath", S_IRWXU ) ;
            ],[have_mkdir_two_args=yes])
			
	AC_MSG_RESULT([$have_mkdir_two_args])
					
	AC_DEFINE_UNQUOTED([HAVE_MKDIR_TWO_ARGS],
		[$have_mkdir_two_args],
		[Define to 1 if mkdir takes two arguments])
			
}


# Still needing platform detection for some specifities :
#   - CeylanDirectory : 
#	 + directory separator, root directory : ARCH_WINDOWS
#	 + non-blocking socket call (fcntl) not working properly on FreeBSD
CheckPlatform()
{

	CEYLAN_ARCH_WINDOWS=0
	CEYLAN_ARCH_LINUX=0
	CEYLAN_ARCH_FREEBSD=0
	CEYLAN_ARCH_NETBSD=0
	CEYLAN_ARCH_OPENBSD=0
	
	CEYLAN_ARCH_BSD=0
	CEYLAN_ARCH_UNIX=0
	
	# This symbol ought to be specifically defined only so that Windows
	# builds declare correctly import/export defines :
	CEYLAN_DLL=""
	
	# Needed when building a library on Windows platforms :
	CEYLAN_DLL_EXPORT_WINDOWS="__declspec( dllexport )"
	
	case "$target" in
	
		*-*-win32*) 
			CEYLAN_ARCH_WINDOWS=1
			CEYLAN_DLL="${CEYLAN_DLL_EXPORT_WINDOWS}"
			;;

		*-*-cygwin*)
			CEYLAN_ARCH_WINDOWS=1
			CFLAGS="$CFLAGS -I/usr/include/mingw -DWIN32 -Uunix -mno-cygwin"
			LIBS="$LIBS -mno-cygwin"
			CEYLAN_DLL="${CEYLAN_DLL_EXPORT_WINDOWS}"
			;;
		
		*-*-mingw32*)
			CEYLAN_ARCH_WINDOWS=1
	        LIBS="-lmingw32 $LIBS -mwindows"
			CEYLAN_DLL="${CEYLAN_DLL_EXPORT_WINDOWS}"
			;;
				
	    *-*-linux*) 
			CEYLAN_ARCH_LINUX=1
			CEYLAN_ARCH_UNIX=1
			;;
			
		*-*-freebsd*)
			CEYLAN_ARCH_FREEBSD=1
			CEYLAN_ARCH_BSD=1
			CEYLAN_ARCH_UNIX=1
			;;
			
		*-*-netbsd*) 
			CEYLAN_ARCH_NETBSD=1
			CEYLAN_ARCH_BSD=1
			CEYLAN_ARCH_UNIX=1
			;;

		*-*-openbsd*) 
			CEYLAN_ARCH_OPENBSD=1
			CEYLAN_ARCH_BSD=1
			CEYLAN_ARCH_UNIX=1
			;;
							
	    *)
	        # Not identified
	        ;;
		
	esac


	AC_DEFINE_UNQUOTED([ARCH_WINDOWS],
		[$CEYLAN_ARCH_WINDOWS],
		[Define to 1 if the target platform is a Windows one])

	AC_DEFINE_UNQUOTED([ARCH_LINUX],
		[$CEYLAN_ARCH_LINUX],
		[Define to 1 if the target platform is GNU/Linux])

	AC_DEFINE_UNQUOTED([ARCH_FREEBSD],
		[$CEYLAN_ARCH_FREEBSD],
		[Define to 1 if the target platform is FreeBSD])

	AC_DEFINE_UNQUOTED([ARCH_NETBSD],
		[$CEYLAN_ARCH_NETBSD],
		[Define to 1 if the target platform is NetBSD])

	AC_DEFINE_UNQUOTED([ARCH_OPENBSD],
		[$CEYLAN_ARCH_OPENBSD],
		[Define to 1 if the target platform is OpenBSD])


	AC_DEFINE_UNQUOTED([ARCH_BSD],
		[$CEYLAN_ARCH_BSD],
		[Define to 1 if the target platform is a BSD one])

	AC_DEFINE_UNQUOTED([ARCH_UNIX],
		[$CEYLAN_ARCH_UNIX],
		[Define to 1 if the target platform is a UNIX one])


	# For all builds, CEYLAN_DLL will be actually defined
	# thanks to command-line preprocessor options (-DCEYLAN_DLL="...")
	# so that headers can avoid #including platform-specific configuration
	# files. Hence no 'AC_DEFINE_UNQUOTED([CEYLAN_DLL], ...' here.
	
	AM_CXXFLAGS="${AM_CXXFLAGS} -DCEYLAN_DLL=\"${CEYLAN_DLL}\""
	
}



# Knowing the endianness of the host that will run the Ceylan library
# allows for correct and fast marshalling.
CheckEndianness()
{

	CEYLAN_RUNS_ON_LITTLE_ENDIAN=1
	AC_C_BIGENDIAN([CEYLAN_RUNS_ON_LITTLE_ENDIAN=0],
		[CEYLAN_RUNS_ON_LITTLE_ENDIAN=1])
	
	AC_DEFINE_UNQUOTED([RUNS_ON_LITTLE_ENDIAN],
		[$CEYLAN_RUNS_ON_LITTLE_ENDIAN],
		[Define to 1 if the target platform is little endian])
 
}


# Some platforms have peculiar needs to set a socket to non-blocking mode.
# For example, FreeBSD compiles '::fcntl( ..., F_SETFL,... | O_NONBLOCK )' fine
# but issues an error at runtime (Inappropriate ioctl for device)
CheckNonBlockingSockets()
{

	case "$target" in
			
		*-*-freebsd*)
			# ioctl should be used instead :
			CEYLAN_USES_FCNTL_FOR_NONBLOCKING_SOCKETS=0
			;;
	
	    *)
	        # fcntl works correctly here :
			CEYLAN_USES_FCNTL_FOR_NONBLOCKING_SOCKETS=1			
	        ;;

	esac

	AC_DEFINE_UNQUOTED([USES_FCNTL_FOR_NONBLOCKING_SOCKETS],
		[$CEYLAN_USES_FCNTL_FOR_NONBLOCKING_SOCKETS],
		[Define to 1 if fcntl is to be preferred to ioctl])
		
}



# TODO : use CXXCOMPILE/CXXLINK to customize build output.



# Make general checks :

CheckMkdir
CheckPlatform
CheckEndianness
CheckNonBlockingSockets

# Enable/disable various features of the Ceylan library :

AC_MSG_NOTICE([checking Ceylan optional features])

# The order of these checks matters, since some of them depends on others :
# for example, if feature A needs B, checkAFeature must be after checkBFeature.

CheckRegexFeature
CheckMultithreadFeature
CheckNetworkFeature
CheckFileDescriptorFeature
CheckFileSymbolicLinkFeature
CheckAdvancedFileAttributeFeature
CheckFileLockFeature
CheckAdvancedProcessManagementFeature
CheckPluginFeature
CheckSignalFeature


AC_SUBST(SYSTEM_LIBS)

# Directories conditionnally selected by the configure step :
AC_SUBST(CEYLAN_EXTRA_DIRS)

# Libraries conditionnally selected by the configure step :
AC_SUBST(CEYLAN_EXTRA_LIBS)

AC_SUBST(AM_CXXFLAGS)
AC_SUBST(AM_LDFLAGS)

# Updates the config file generated by AX_PREFIX_CONFIG_H :
AC_CONFIG_COMMANDS([configprefix],[cat src/code/CeylanConfig.h | sed 's|CEYLAN_HAVE_|CEYLAN_USES_|g' > .CeylanConfig.h; echo "/* Note : NEVER commit (check-in) this generated file ! */" >> .CeylanConfig.h; /bin/mv -f .CeylanConfig.h src/code/CeylanConfig.h; /bin/rm -f _configs.sed])

AC_CONFIG_FILES([
    Makefile
    src/Makefile
	src/code/Makefile
	src/code/generic/CeylanHeaderVersion.cc
	src/code/generic/Makefile
	src/code/interfaces/Makefile
	src/code/logs/Makefile
	src/code/maths/Makefile
	src/code/middleware/Makefile
	src/code/modules/Makefile
	src/code/network/Makefile
	src/code/scripts/python/Makefile
	src/code/scripts/python/tests/Makefile
	src/code/scripts/shell/Makefile
	src/code/scripts/shell/tests/Makefile
	src/code/scripts/Makefile
	src/code/system/Makefile
	src/conf/doc/Makefile
	src/conf/Makefile
	src/conf/MakeColors.inc
	src/conf/build/Makefile
	src/conf/build/ceylan-0.3.pc
	src/conf/build/m4/Makefile
	src/conf/doc/doxygen.conf
	src/conf/environment/Makefile
	src/doc/basic/Ceylan-AUTHORS-template.txt
	src/doc/basic/Ceylan-COPYING.LIB-template.txt
	src/doc/basic/Ceylan-FAQ-template.txt
	src/doc/basic/Ceylan-INSTALL-template.txt
	src/doc/basic/Ceylan-MAINTENERS-template.txt
	src/doc/basic/Ceylan-NEWS-template.txt
	src/doc/basic/Ceylan-README-template.txt
	src/doc/basic/Ceylan-THANKS-template.txt
	src/doc/basic/Ceylan-TODO-template.txt
	src/doc/basic/Makefile
	src/doc/Makefile
])


AC_OUTPUT

echo \
"------------------------------------------------------------------------
Configuration:

  Source code location:   ${srcdir}
  C++ compiler:           ${CXX}
  C++ compiler flags:     ${CXXFLAGS}
  Host System Type:       ${host}
  Install path (prefix):  ${prefix}

  See src/code/CeylanConfig.h for further configuration information.
------------------------------------------------------------------------"
